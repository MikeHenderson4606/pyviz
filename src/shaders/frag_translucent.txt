# version 410 core

in vec3 fragmentColor;
in vec3 Normal;
in vec3 fragmentPosition;

uniform vec3 viewPos;

out vec4 color;

vec3 lightPos = vec3(0.0, 3.0, 10.0);
vec3 lightColor = vec3(1.0, 1.0, 1.0);

void main() {
    // Ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    // Diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - fragmentPosition);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - fragmentPosition);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  

    vec3 result = (diffuse + ambient + specular) * fragmentColor;
    color = vec4(result, 0.65);
}